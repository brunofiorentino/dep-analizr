using DepAnalyzr.Core;
using Xunit;
using Xunit.Abstractions;

namespace DepAnalyzr.Tests.Core;

[Collection(nameof(LibCAnalyzedCollection))]
public class WhenCreatingAssemblyDependencyGraphs
{
    private readonly LibCAnalyzedScenario _libCAnalyzedScenario;
    private readonly ITestOutputHelper _output;

    public WhenCreatingAssemblyDependencyGraphs(LibCAnalyzedScenario libCAnalyzedScenario, ITestOutputHelper output)
    {
        _libCAnalyzedScenario = libCAnalyzedScenario;
        _output = output;
    }

    // Note: dotnet test --logger "console;verbosity=detailed"

    [Fact]
    public void NonFilteredRelationshipsAreDetected()
    {
        var analysisResult = _libCAnalyzedScenario.AnalysisResult;
        var depGraph = DependencyGraph.CreateForAssemblies(analysisResult, null);
        var graphVizDotFormat = depGraph.ToGraphvizDot();

        _output.WriteLine(graphVizDotFormat);

        const string expectedGraphVizDotFormat = @"digraph G {
0 [shape=box, label=""DepAnalyzr.Tests.LibA""];
1 [shape=box, label=""DepAnalyzr.Tests.LibB""];
2 [shape=box, label=""DepAnalyzr.Tests.LibC""];
1 -> 0 [];
2 -> 0 [];
2 -> 1 [];
}
";

        Assert.Equal(graphVizDotFormat, expectedGraphVizDotFormat);
    }
    
    [Fact]
    public void FilteredRelationshipsAreDetected()
    {
        var analysisResult = _libCAnalyzedScenario.AnalysisResult;
        const string pattern = "(DepAnalyzr.Tests.LibA|DepAnalyzr.Tests.LibC)";
        var depGraph = DependencyGraph.CreateForAssemblies(analysisResult, pattern);
        var graphvizDotFormat = depGraph.ToGraphvizDot();

        _output.WriteLine(graphvizDotFormat);

        const string expectedGraphVizDotFormat = @"digraph G {
0 [shape=box, label=""DepAnalyzr.Tests.LibA""];
1 [shape=box, label=""DepAnalyzr.Tests.LibC""];
1 -> 0 [];
}
";
        
        Assert.Equal(graphvizDotFormat, expectedGraphVizDotFormat);
    }
    
    [Fact]
    public void SvgGraphCanBeGenerated()
    {
        var analysisResult = _libCAnalyzedScenario.AnalysisResult;
        var depGraph = DependencyGraph.CreateForAssemblies(analysisResult, null);
        var graphvizSvgFormat = depGraph.ToGraphvizSvg();

        _output.WriteLine(graphvizSvgFormat);
        Assert.Contains("<!-- Generated by graphviz", graphvizSvgFormat);
    }
}